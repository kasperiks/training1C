{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"//начало текста модуля

#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯУдаляюДокументыВида(Парам01)"",""ЯУдаляюДокументыВида"",""Когда    Я удаляю документы вида """"имядок"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ДокументыУдалилисьКорректно(Парам01)"",""ДокументыУдалилисьКорректно"",""Тогда Документы удалились корректно """"ИмяДок"""""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

//окончание текста модуля
&НаКлиенте
Процедура ЗагрузитьТекстурыИзМакетаЗавершениеКлиент(УдалосьПоместитьФайл, Адрес, ВыбранноеИмяФайла, ИмяМакета) Экспорт 
	ЗагрузитьТекстурыИзМакетаЗавершение(УдалосьПоместитьФайл, Адрес, ВыбранноеИмяФайла, ИмяМакета);
	
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаСервере
Функция ЗагрузитьТекстурыИзМакетаЗавершение(УдалосьПоместитьФайл, Адрес, ВыбранноеИмяФайла, ИмяМакета)  
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.записать(ИмяВремФайла);
	
	ВнешОбработка = ВнешниеОбработки.Создать(ИмяВремФайла,Ложь);
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	
	Текст = РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ВремДок = Новый ТекстовыйДокумент;
	ВремДок.УстановитьТекст(Текст);
	ВремДок.Записать(ИмяВремФайла,КодировкаТекста.UTF8);
	
	ВнешОбработка.ВыполнитьЗагрузку(ИмяВремФайла);
КонецФункции

&НаКлиенте
Процедура ЗагрузитьТекстурыИзМакета(ИмяМакета)
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	НачальноеИмяФайла = ""C:\repo\training1C\tools\ВыгрузкаЗагрузкаДанныхXML83.epf"";
	
	Адрес = """";
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения(""ЗагрузитьТекстурыИзМакетаЗавершение"",ЭтотОбъект,ИмяМакета),Адрес,НачальноеИмяФайла,Ложь);
КонецПроцедуры

&НаКлиенте
//Когда    Я удаляю документы вида ""имядок""
//@ЯУдаляюДокументыВида(Парам01)
Процедура ЯУдаляюДокументыВида(Парам01) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Парам01) Тогда 
		//Ванесса.ПосмотретьЗначение(Парам01,Истина);
		ВызватьИсключение ""Не реализовано."";
	КонецЕсли;
	
	УдалитьДокиНаСервере(Парам01);

КонецПроцедуры

&НаСервере
Процедура УдалитьДокиНаСервере(Парам01)
	ДокВид = Метаданные.Документы[Парам01].Имя;
	Сообщить(""Имя метаданных: ""+Парам01);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.""+ДокВид+"" КАК Док"";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.Удалить();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//Тогда Документы удалились корректно ""ИмяДок""
//@ДокументыУдалилисьКорректно(Парам01)
Процедура ДокументыУдалилисьКорректно(Парам01) Экспорт
	Если НЕ ДокументыУдалилисьКорректноНаСервере(Парам01) Тогда
		Сообщить(""НЕ все документы удалены!!"");
		//Ванесса.ПосмотретьЗначение(Парам01,Истина);
		ВызватьИсключение ""Не реализовано."";
	КонецЕсли;
	Сообщить(""Проверка шага загрузки текстур"");
	СостояниеВанесса = Ванесса.получитьСОстояниеVanessaBehavior();
	Если СостояниеВанесса.ТекущийСценарий.имя  = ""Закупка товара"" Тогда
		ЗагрузитьТекстурыИзМакета(""ДокументыТекстуры"");	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция  ДокументыУдалилисьКорректноНаСервере(Парам01)
	ДокВид = Метаданные.Документы[Парам01].Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.""+ДокВид+"" КАК Док"";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Возврат Ложь;  // не все удалились
	иначе
		Возврат Истина;//все чисто, обработка гуд)
	КонецЕсли;
	
КонецФункции
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}